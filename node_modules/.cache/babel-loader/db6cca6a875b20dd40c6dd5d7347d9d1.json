{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/pierrebusson/Documents/react/appreact copie/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\n\nexport function KnownDirectivesRule(context) {\n  var locationsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  var _iterator = _createForOfIteratorHelper(definedDirectives),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var directive = _step.value;\n      locationsMap[directive.name] = directive.locations;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  var _iterator2 = _createForOfIteratorHelper(astDefinitions),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var def = _step2.value;\n\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        locationsMap[def.name.value] = def.locations.map(function (name) {\n          return name.value;\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {\n    Directive: function Directive(node, _key, _parent, _path, ancestors) {\n      var name = node.name.value;\n      var locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(new GraphQLError(\"Unknown directive \\\"@\".concat(name, \"\\\".\"), node));\n        return;\n      }\n\n      var candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(new GraphQLError(\"Directive \\\"@\".concat(name, \"\\\" may not be used on \").concat(candidateLocation, \".\"), node));\n      }\n    }\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  var appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION:\n      {\n        var parentNode = ancestors[ancestors.length - 3];\n        'kind' in parentNode || invariant(false);\n        return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;\n      }\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(false, 'Unexpected operation: ' + inspect(operation));\n}","map":{"version":3,"sources":["/Users/pierrebusson/Documents/react/appreact copie/node_modules/graphql/validation/rules/KnownDirectivesRule.mjs"],"names":["inspect","invariant","GraphQLError","Kind","OperationTypeNode","DirectiveLocation","specifiedDirectives","KnownDirectivesRule","context","locationsMap","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","name","locations","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","value","map","Directive","node","_key","_parent","_path","ancestors","reportError","candidateLocation","getDirectiveLocationForASTPath","includes","appliedTo","length","OPERATION_DEFINITION","getDirectiveLocationForOperation","operation","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE_DEFINITION","SCHEMA_DEFINITION","SCHEMA_EXTENSION","SCHEMA","SCALAR_TYPE_DEFINITION","SCALAR_TYPE_EXTENSION","SCALAR","OBJECT_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","OBJECT","FIELD_DEFINITION","INTERFACE_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","INTERFACE","UNION_TYPE_DEFINITION","UNION_TYPE_EXTENSION","UNION","ENUM_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","ENUM","ENUM_VALUE_DEFINITION","ENUM_VALUE","INPUT_OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","INPUT_OBJECT","INPUT_VALUE_DEFINITION","parentNode","INPUT_FIELD_DEFINITION","ARGUMENT_DEFINITION","QUERY","MUTATION","SUBSCRIPTION"],"mappings":"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","sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, node),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n  false || invariant(false, 'Unexpected operation: ' + inspect(operation));\n}\n"]},"metadata":{},"sourceType":"module"}