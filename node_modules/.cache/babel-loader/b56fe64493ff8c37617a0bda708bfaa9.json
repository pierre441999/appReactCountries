{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { GraphQLScalarType } from './definition.mjs'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    var num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(inspect(coercedValue)));\n    }\n\n    if (num > MAX_INT || num < MIN_INT) {\n      throw new GraphQLError('Int cannot represent non 32-bit signed integer value: ' + inspect(coercedValue));\n    }\n\n    return num;\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(inspect(inputValue)));\n    }\n\n    if (inputValue > MAX_INT || inputValue < MIN_INT) {\n      throw new GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(inputValue));\n    }\n\n    return inputValue;\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(print(valueNode)), valueNode);\n    }\n\n    var num = parseInt(valueNode.value, 10);\n\n    if (num > MAX_INT || num < MIN_INT) {\n      throw new GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(valueNode.value), valueNode);\n    }\n\n    return num;\n  }\n});\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    var num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(inspect(coercedValue)));\n    }\n\n    return num;\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(inspect(inputValue)));\n    }\n\n    return inputValue;\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return parseFloat(valueNode.value);\n  }\n});\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\"String cannot represent value: \".concat(inspect(outputValue)));\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\"String cannot represent a non string value: \".concat(inspect(inputValue)));\n    }\n\n    return inputValue;\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\"String cannot represent a non string value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(inspect(coercedValue)));\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(inspect(inputValue)));\n    }\n\n    return inputValue;\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\"ID cannot represent value: \".concat(inspect(outputValue)));\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(\"ID cannot represent value: \".concat(inspect(inputValue)));\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError('ID cannot represent a non-string and non-integer value: ' + print(valueNode), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\nexport var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(function (_ref) {\n    var name = _ref.name;\n    return type.name === name;\n  });\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      var valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}","map":{"version":3,"sources":["/Users/pierrebusson/Documents/react/appreact/node_modules/graphql/type/scalars.mjs"],"names":["inspect","isObjectLike","Kind","print","GraphQLError","GraphQLScalarType","MAX_INT","MIN_INT","GraphQLInt","name","description","serialize","outputValue","coercedValue","serializeObject","num","Number","isInteger","parseValue","inputValue","parseLiteral","valueNode","kind","INT","parseInt","value","GraphQLFloat","isFinite","FLOAT","parseFloat","GraphQLString","toString","STRING","GraphQLBoolean","BOOLEAN","GraphQLID","String","specifiedScalarTypes","Object","freeze","isSpecifiedScalarType","type","some","valueOf","valueOfResult","toJSON"],"mappings":"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","sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { GraphQLScalarType } from './definition.mjs'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nconst MAX_INT = 2147483647;\nconst MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > MAX_INT || num < MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > MAX_INT || inputValue < MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > MAX_INT || num < MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        valueNode,\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        valueNode,\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n"]},"metadata":{},"sourceType":"module"}